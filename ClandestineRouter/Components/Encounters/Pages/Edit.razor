@* 
    # DEV NOTES

    This page is my first full form page with several datapoints. Many of lessons learned here 
    such as:
       - Re-rendering input model causes loss of data 
       - Need to load metadata (like dropdown values) after render
            - This isn't really a need, more like maybe a better thing? So the page will load but 
            the user doesn't have to wait for the metadata to load before seeing the page.
            - Also, this way we only load it once using the `firstRender` check. 
                - Although, this could be fixed with a boolean flag if needed.
        - Separate accessing the user from this component to a service
        - Use a persistent component state to store the user between page reloads

    ## How to set up a new page. 

    1. Create the page component in the appropriate folder. 
        - Use the `@page` directive to set the route.
        - Use `@rendermode InteractiveServer` for Blazor Server apps.
    2. In the code section:
        - Inject necessary services (e.g., DbContext, UserAccessor, TimeZoneService).
        - Define any parameters needed (e.g., `EncounterId` for editing an existing encounter).
        - Create a model class for the form inputs with validation attributes (InputModel).
        - Create a page model class to hold metadata for dropdowns and other selections (PageModel).
    3. Add the EditForm component :
        - Bind the form to the InputModel.
        - Use DataAnnotationsValidator and ValidationSummary for validation.
        - Create form fields using InputText, InputSelect, InputDate, etc., binding to the InputModel properties.
        - Add ValidationMessage components for each field to display validation errors.
    4. For each property in the InputModel:
        - Use appropriate data annotations for validation (e.g., [Required], [MaxLength], custom validation attributes).
        - Implement IValidatableObject for complex validation logic if needed.
        - Add cooresponding private properties to the component class to hold state during page lifecycle
*@
@page "/encounters/edit"
@* @rendermode InteractiveServer *@
@rendermode @(new InteractiveServerRenderMode(prerender: false))

@attribute [Authorize]
@implements IDisposable

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity

@using ClandestineRouter.Components.Account
@using ClandestineRouter.Services
@using ClandestineRouter.Data.Validation.Attributes

@inject ApplicationDbContext DbContext
@inject ITimeZoneService TimeZoneService
@inject IdentityUserAccessor UserAccessor
@inject SignInManager<ApplicationUser> SignInManager
@inject PersistentComponentState ApplicationState
@inject UserDataService UserDataService

<PageTitle>Encounters</PageTitle>

<h1>@TitleVerb encounter</h1>

<div class="row">
    <div class="col-lg-6">
        @if (!IsInitialized)
        {
            <div class="text-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else
        {
            <EditForm Model="Input" FormName="PersonaAdd" OnValidSubmit="HandleOnValidSubmitAsync">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                
                <section class="mb-4">
                    <div class="form-floating mb-3">
                        @* TODO Could this be prettier? Better CSS or just a different UI? *@
                        <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="Input.OccurrenceDateTimeLocal" id="Input.OccurrenceDateTimeLocal" class="form-control" placeholder="Enter the handle or username" disabled="@IsWorking" />
                        <label for="Input.OccurrenceDateTimeUtc" class="form-label">Occurrence date and time</label>
                        <ValidationMessage For="() => Input.OccurrenceDateTimeLocal" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.EncounterTypeId" class="form-select" id="Input.EncounterTypeId" disabled="@IsWorking">
                            <option value="">Select encounter type</option>
                            @foreach (var type in Page.EncounterTypes)
                            {
                                <option value="@type.Id">@type.Name</option>
                            }
                        </InputSelect>
                        <label for="Input.EncounterTypeId" class="form-label" accesskey="0">Encounter Type</label>
                        <ValidationMessage For="() => Input.EncounterTypeId" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        @* TODO Replace the input with better lookup UI *@
                        <InputSelect @bind-Value="Input.PersonaId" class="form-select" id="Input.PersonaId" disabled="@IsWorking">
                            <option value="">Select a persona</option>
                            @foreach (var persona in Page.Personas)
                            {
                                <option value="@persona.Id">@persona.Name</option>
                            }
                        </InputSelect>
                        <label for="Input.PersonaId" class="form-label" accesskey="0">Persona</label>
                        <ValidationMessage For="() => Input.PersonaId" class="text-danger" />
                    </div>
                </section>
                <section class="mb-4">
                    <h3>Social media</h3>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.SocialMediaAppId" class="form-select" id="Input.SocialMediaAppId" disabled="@IsWorking">
                            <option value="">Select an app</option>
                            @foreach (var app in Page.SocialMediaApps)
                            {
                                <option value="@app.Id">@app.Name</option>
                            }
                        </InputSelect>
                        <label for="Input.SocialMediaAppId" class="form-label">Social media app</label>
                        <ValidationMessage For="() => Input.SocialMediaAppId" class="text-danger" />
                    </div>
                    <div class="row">
                        <div class="col col-md-9">
                            <div class="form-floating mb-3">
                                <InputText @bind-Value="Input.SocialMediaHandle" id="Input.SocialMediaHandle" class="form-control" placeholder="Enter the handle or username" disabled="@IsWorking" />
                                <label for="Input.SocialMediaHandle" class="form-label">Handle/username</label>
                                <ValidationMessage For="() => Input.SocialMediaHandle" class="text-danger" />
                            </div>
                        </div>
                        <div class="col col-md-3">
                            <div>
                                <button type="button" @onclick="HandleGetSocialMediaAccountDataAsync" class="btn btn-sm btn-secondary">Get public data</button>
                            </div>
                            <div>
                                <small class="text-muted">
                                    @GetSocialMediaAccountDataStatus
                                </small>
                            </div>
                        </div>
                    </div>
                </section>

                <section class="mb-4">
                    <h3>Encounter details</h3>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.BeginBehaviorTypeId" class="form-select" id="Input.BeginBehaviorTypeId" disabled="@IsWorking">
                            <option value="">Select an app</option>
                            @foreach (var app in Page.BehaviorTypes)
                            {
                                <option value="@app.Id">@app.Name</option>
                            }
                        </InputSelect>
                        <label for="Input.BeginBehaviorTypeId" class="form-label">Begin behavior type</label>
                        <ValidationMessage For="() => Input.BeginBehaviorTypeId" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="Input.EndBehaviorTypeId" class="form-select" id="Input.EndBehaviorTypeId" disabled="@IsWorking">
                            <option value="">Select an app</option>
                            @foreach (var app in Page.BehaviorTypes)
                            {
                                <option value="@app.Id">@app.Name</option>
                            }
                        </InputSelect>
                        <label for="Input.EndBehaviorTypeId" class="form-label">End behavior type</label>
                        <ValidationMessage For="() => Input.EndBehaviorTypeId" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputTextArea @bind-Value="Input.Notes" id="Input.Notes" class="form-control textarea-lrg" placeholder="Enter any notes for this encounter" />
                        <label for="Input.Notes" class="form-label">Notes</label>
                        <ValidationMessage For="() => Input.Notes" class="text-danger" />
                    </div>
                </section>

                <section class="mb-4">
                    <div class="d-flex justify-content-start gap-2">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <a href="/personas" class="btn btn-outline-secondary">Cancel</a>
                        @* @if (EditPersonaGuid.HasValue)
                    {
                        <button type="button" class="btn btn-outline-danger ms-auto" disabled="@IsWorking" @onclick="() => HandleDeletePersona()">Delete</button>
                    } *@
                    </div>
                </section>
            </EditForm>
        }
    </div>
</div>

@code {
    [SupplyParameterFromQuery(Name = "id")]
    public Guid? EncounterId { get; set; }

    // Note: This is bound to the form so it will refresh this variable from the form
    // everytime there is a rerender. Because of this, the fields/properties in the 
    // Input Model must be stored outside the model to preserve values between renders.
    // [SupplyParameterFromForm]
    // private InputModel? Input { get; set; }
    private InputModel Input = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private PersistingComponentStateSubscription persistingSubscription;

    private ApplicationUser? user;
    private PageModel Page { get; set; } = new();
    private string TitleVerb = "Add";
    private bool IsWorking = false;
    private bool IsInitialized = false;
    private string GetSocialMediaAccountDataStatus = "Click button to get data";

    private DateTime? _OccurrenceDateTime;

    protected override async Task OnInitializedAsync()
    {
        IsWorking = true;
        await LoadPageMetadata();

        // Register for state persistence
        persistingSubscription = ApplicationState.RegisterOnPersisting(PersistData);

        // Try to get persisted state first
        if (!ApplicationState.TryTakeFromJson<ApplicationUser>("AppUser", out var restoredAppUser))
        {
            // No persisted state, load fresh from service 
            user = await UserDataService.GetCurrentUserAsync();
            if (user == null)
            {
                // This should never happen because of the [Authorize] attribute
                throw new InvalidOperationException("Unable to load user.");
            }
            var utcNow = DateTime.UtcNow;
            var userTime = utcNow.ToUserTime(TimeZoneService, user);
            _OccurrenceDateTime = DateTime.SpecifyKind(userTime, DateTimeKind.Unspecified);
            Input.OccurrenceDateTimeLocal = _OccurrenceDateTime.Value;
        }
        else
        {
            user = restoredAppUser;
        }

        IsWorking = false;
        IsInitialized = true;
    }

    private Task PersistData()
    {
        if (user != null)
            ApplicationState.PersistAsJson("AppUser", user);
        return Task.CompletedTask;
    }

    void IDisposable.Dispose() => persistingSubscription.Dispose();

    protected override void OnParametersSet()
    {
        if (EncounterId.HasValue)
            TitleVerb = "Edit";
    }

    private async Task LoadPageMetadata()
    {
        Page.Personas = await DbContext.Personas
            .Select(p => new PersonaDto { Id = p.Id, Name = p.Name })
            .ToListAsync();
        Page.SocialMediaApps = await DbContext.SocialMediaApps
            .Select(s => new SocialMediaAppDto { Id = s.Id, Name = s.Name })
            .ToListAsync();
        Page.BehaviorTypes = await DbContext.BehaviorTypes
            .Select(b => new BehaviorTypeDto { Id = b.Id, Name = b.Name })
            .ToListAsync();
        Page.EncounterTypes = await DbContext.EncounterTypes
            .Select(e => new EncounterTypeDto { Id = e.Id, Name = e.Name })
            .ToListAsync();
    }

    private void HandleOnValidSubmitAsync(EditContext args)
    {
        IsWorking = true;

        // try
        // {
        //     //first just save new ones, then add updating later
        //     var newEncounter = new Encounter
        //         {
        //             OccurrenceDateTimeUtc = Input.OccurrenceDateTimeLocal,
        //             EncounterTypeId = Input.EncounterTypeId

        //         };
        // }

        IsWorking = false;
    }

    private sealed class InputModel : IValidatableObject
    {
        public string? Notes { get; set; }

        [Display(Name = "Occurrence date and time")]
        [Required]
        public DateTime OccurrenceDateTimeLocal { get; set; }

        [Display(Name = "Persona")]
        [Required]
        public Guid PersonaId { get; set; }

        [Display(Name = "Encounter type")]
        [Required]
        public Guid EncounterTypeId { get; set; }

        [Display(Name = "Social media app")]
        public Guid SocialMediaAppId { get; set; }

        [Display(Name = "Social media handle/username")]
        [MaxLength(128)]
        [RequiredIf("SocialMediaAppId", ErrorMessage = "Social media handle/username is required when a social media app is set.")]
        public string? SocialMediaHandle { get; set; }

        [Display(Name = "Begin behavior type")]
        public Guid? BeginBehaviorTypeId { get; set; }

        [Display(Name = "End behavior type")]
        public Guid? EndBehaviorTypeId { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            var results = new List<ValidationResult>();
            if (!BeginBehaviorTypeId.HasValue && EndBehaviorTypeId.HasValue)
            {
                results.Add(new ValidationResult("Begin behavior type must be set if end behavior type is set.", new[] { nameof(EndBehaviorTypeId) }));
            }
            return results;
        }
    }

    private sealed class PageModel
    {
        public List<PersonaDto> Personas { get; set; } = [];
        public List<SocialMediaAppDto> SocialMediaApps { get; set; } = [];
        public List<BehaviorTypeDto> BehaviorTypes { get; set; } = [];
        public List<EncounterTypeDto> EncounterTypes { get; set; } = [];
    }

    private async Task HandleGetSocialMediaAccountDataAsync(MouseEventArgs args)
    {
        if (!IsWorking)
        {
            IsWorking = true;
            GetSocialMediaAccountDataStatus = "Fetching data...";
            await Task.Delay(2000); // Simulate a delay for fetching data
            GetSocialMediaAccountDataStatus = "Done fetching data!";
            IsWorking = false;
        }
    }
}
