@page "/personas"
@using ClandestineRouter.Common.Models
@using ClandestineRouter.Services
@inject ApplicationDbContext DbContext
@inject IJSRuntime JSRuntime
@inject FeedbackService FeedbackService
@rendermode InteractiveServer

<PageTitle>@pageTitle</PageTitle>

<h1>@pageTitle</h1>

<div class="row">
    <div class="col">
        <p class="text-muted fw-light">Manage your personas here. Personas are used to represent different individuals online.</p>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="d-flex justify-content-start">
            <NavLink class="btn btn-primary btn-sm" href="personas/edit">
                <i class="fas fa-plus"></i> Add New
            </NavLink>
        </div>
    </div>
</div>

<div class="row">
    <div class="col col-md-10 col-lg-10">
        <QuickGrid Items="personas" Class="table table-hover table-responsive">
            <PropertyColumn Property="p => p.Name" Title="Name" />
            <PropertyColumn Property="p => p.UpdatedDateTimeUtc" Title="Updated" Format="MM/dd/yyyy hh:mm tt" />
                <TemplateColumn Title="Actions">
                    <a class="btn btn-outline-primary btn-sm" href="@($"personas/edit?id={context.Id}")">
                        <i class="fas fa-edit"></i> Edit
                    </a>
                    <button class="btn btn-outline-danger btn-sm" @onclick="() => HandleRemovePersona(context.Id)" >
                        <i class="fas fa-trash"></i> Delete
                    </button>
                </TemplateColumn>
        </QuickGrid>
    </div>
</div>

@code {
    private const string pageTitle = "Personas";
    private IQueryable<Persona>? personas;

    [Inject]
    public BreadcrumbService BreadcrumbService { get; set; } = default!;

    protected override void OnInitialized()
    {
        BreadcrumbService.SetBreadcrumbs(
            new BreadcrumbItem { Text = "Home", Href = "/", Icon = "🏠" },
            new BreadcrumbItem { Text = "Personas", Href = "/personas", Icon = "🧑‍🤝‍🧑" }
        );
        LoadItems();
    }

    private void LoadItems()
    {
        personas = DbContext.Personas.OrderBy(p => p.Name).AsQueryable();
    }
    private async Task HandleRemovePersona(Guid Id)
    {
        if (Id == Guid.Empty) return;
        var persona = DbContext.Personas.Find(Id);
        if (persona is null) return;
        if (await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you would like to delete {persona.Name}?"))
        {
            DbContext.Personas.Remove(persona);
            DbContext.SaveChanges();
            LoadItems();
            FeedbackService.ShowSuccess($"Successfully deleted persona '{persona.Name}'.");
        }
    }
}
