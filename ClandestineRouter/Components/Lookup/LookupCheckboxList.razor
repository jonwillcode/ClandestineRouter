@using ClandestineRouter.Services
@typeparam TLookup where TLookup : class, IBaseLookupModel
@inject ILookupService LookupService

<div class="mb-3">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="form-label">@Label</label>
    }
    @if (lookupItems != null)
    {
        @foreach (var item in lookupItems)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox"
                       id="@($"{GroupName}_{item.Id}")"
                       checked="@(SelectedValues.Contains(item.Id))"
                       @onchange="@((e) => OnSelectionChanged(item.Id, (bool)e.Value!))"
                       disabled="@Disabled" />
                <label class="form-check-label" for="@($"{GroupName}_{item.Id}")">
                    @item.Name
                </label>
            </div>
        }
    }
    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <div class="invalid-feedback d-block">@ValidationMessage</div>
    }
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public List<Guid> SelectedValues { get; set; } = new();
    [Parameter] public EventCallback<List<Guid>> SelectedValuesChanged { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? ValidationMessage { get; set; }
    [Parameter] public string GroupName { get; set; } = Guid.NewGuid().ToString();

    private List<TLookup>? lookupItems;

    protected override async Task OnInitializedAsync()
    {
        lookupItems = await LookupService.GetLookupItemsAsync<TLookup>();
    }

    private async Task OnSelectionChanged(Guid itemId, bool isChecked)
    {
        if (isChecked)
        {
            if (!SelectedValues.Contains(itemId))
                SelectedValues.Add(itemId);
        }
        else
        {
            SelectedValues.Remove(itemId);
        }

        await SelectedValuesChanged.InvokeAsync(SelectedValues);
    }
}