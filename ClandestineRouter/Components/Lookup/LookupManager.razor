@using ClandestineRouter.Data.Repositories
@typeparam TLookup where TLookup : class, IBaseLookupModel, new()
@inject ILookupRepository<TLookup> Repository
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">Manage @typeof(TLookup).Name</h5>
        <button class="btn btn-primary btn-sm" @onclick="ShowAddModal">
            <i class="fas fa-plus"></i> Add New
        </button>
    </div>
    <div class="card-body">
        @if (items == null)
        {
            <div class="text-center">
                <div class="spinner-border" role="status"></div>
            </div>
        }
        else if (!items.Any())
        {
            <p class="text-muted">No items found.</p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Status</th>
                            <th>Created</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in items)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>
                                    <span class="badge @(item.IsActive ? "bg-success" : "bg-secondary")">
                                        @(item.IsActive ? "Active" : "Inactive")
                                    </span>
                                </td>
                                <td>@item.UpdatedDateTimeUtc.ToString("MMM dd, yyyy")</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary me-1"
                                            @onclick="() => ShowEditModal(item)">
                                        <i class="btn btn-sm btn-outline-primary">Edit</i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger"
                                            @onclick="() => DeleteItem(item.Id)">
                                        <i class="btn btn-sm btn-outline-danger">Delete</i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@* Modal for Add/Edit *@
@if (showModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingItem.Id == Guid.Empty ? "Add" : "Edit") @typeof(TLookup).Name</h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingItem" OnValidSubmit="SaveItem">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText @bind-Value="editingItem.Name" class="form-control" />
                            <ValidationMessage For="() => editingItem.Name" />
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="editingItem.IsActive" class="form-check-input" />
                                <label class="form-check-label">Active</label>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<TLookup>? items;
    private bool showModal = false;
    private TLookup editingItem = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    private async Task LoadItems()
    {
        items = await Repository.GetAllAsync();
    }

    private void ShowAddModal()
    {
        editingItem = new TLookup();
        showModal = true;
    }

    private void ShowEditModal(TLookup item)
    {
        editingItem = new TLookup
        {
            Id = item.Id,
            Name = item.Name,
            IsActive = item.IsActive
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingItem = new();
    }

    private async Task SaveItem()
    {
        try
        {
            if (editingItem.Id == Guid.Empty)
            {
                await Repository.CreateAsync(editingItem);
            }
            else
            {
                await Repository.UpdateAsync(editingItem);
            }

            await LoadItems();
            HideModal();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving item: {ex.Message}");
        }
    }

    private async Task DeleteItem(Guid id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        if (confirmed)
        {
            try
            {
                await Repository.DeleteAsync(id);
                await LoadItems();
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting item: {ex.Message}");
            }
        }
    }
}